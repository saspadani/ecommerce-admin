// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id String @id @default(uuid())
  name String 
  userId String
  billboards Billboard[] @relation("StoretoBillboard")
  categories Category[] @relation("StoretoCategory")
  sizes Size[] @relation("StoretoSize")
  colors Color[] @relation("StoretoColor")
  products Product[] @relation("StoretoProduct")
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoretoBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoretoCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  product Product[] @relation("CategorytoProduct")
  name String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoretoSize", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoretoColor", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoretoProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategorytoProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}